import asyncio
import json
import logging
import websockets
from typing import List, Dict, Optional
import requests
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

class BybitWebSocketClient:
    def __init__(self, trading_pairs: List[str], alert_manager, connection_manager):
        self.trading_pairs = trading_pairs
        self.alert_manager = alert_manager
        self.connection_manager = connection_manager
        self.websocket = None
        self.is_running = False
        self.ping_task = None
        self.last_message_time = None
        
        # Bybit WebSocket URLs
        self.ws_url = "wss://stream.bybit.com/v5/public/linear"
        self.rest_url = "https://api.bybit.com"
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.update_interval = alert_manager.settings.get('update_interval_seconds', 1)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        self.messages_received = 0
        self.last_stats_log = datetime.utcnow()
        
        # –ö—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
        self.processed_candles = {}  # symbol -> last_processed_timestamp
        
        # üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–∞—Ä
        self.subscribed_pairs = set()
        self.subscription_confirmed = set()  # –ü–∞—Ä—ã —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
        self.failed_subscriptions = set()
        self.subscription_attempts = {}  # symbol -> attempt_count
        
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        self.max_pairs_limit = 100  # –ú–∞–∫—Å–∏–º—É–º 100 –ø–∞—Ä –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ WebSocket

    async def start(self):
        """–ó–∞–ø—É—Å–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ë–î"""
        self.is_running = True
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        if len(self.trading_pairs) > self.max_pairs_limit:
            logger.warning(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–∞—Ä ({len(self.trading_pairs)}), –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ {self.max_pairs_limit} –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ WebSocket")
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ N –ø–∞—Ä, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏
            self.trading_pairs = sorted(self.trading_pairs)[:self.max_pairs_limit]
            logger.info(f"üìä –í—ã–±—Ä–∞–Ω–æ {len(self.trading_pairs)} –ø–∞—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        
        # üß† –ù–û–í–û–ï: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        await self.intelligent_data_check_and_load()
        
        # –ó–∞—Ç–µ–º –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –¥–ª—è real-time –¥–∞–Ω–Ω—ã—Ö
        while self.is_running:
            try:
                await self.connect_websocket()
            except Exception as e:
                logger.error(f"‚ùå WebSocket –æ—à–∏–±–∫–∞: {e}")
                if self.is_running:
                    logger.info("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(10)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        self.is_running = False
        if self.ping_task:
            self.ping_task.cancel()
        if self.websocket:
            await self.websocket.close()

    async def intelligent_data_check_and_load(self):
        """üß† –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ë–î –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üîç –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        retention_hours = self.alert_manager.settings.get('data_retention_hours', 2)
        analysis_hours = self.alert_manager.settings.get('analysis_hours', 1)
        total_hours_needed = retention_hours + analysis_hours + 1  # +1 —á–∞—Å –±—É—Ñ–µ—Ä–∞
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —Å–∏–º–≤–æ–ª–∞–º
        summary = await self.alert_manager.db_manager.get_missing_data_summary(
            self.trading_pairs, total_hours_needed
        )
        
        logger.info(f"üìä –°–≤–æ–¥–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º:")
        logger.info(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: {summary['total_symbols']}")
        logger.info(f"   ‚Ä¢ –° —Ö–æ—Ä–æ—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {summary['symbols_with_good_data']}")
        logger.info(f"   ‚Ä¢ –¢—Ä–µ–±—É—é—Ç –∑–∞–≥—Ä—É–∑–∫–∏: {summary['symbols_need_loading']}")
        logger.info(f"   ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: {summary.get('quality_distribution', {})}")
        
        # –ï—Å–ª–∏ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ
        if summary['symbols_with_good_data'] > summary['symbols_need_loading']:
            logger.info("‚úÖ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ...")
            await self._load_missing_data_optimized(summary['symbols_details'], total_hours_needed)
        else:
            logger.info("‚ö†Ô∏è –ú–Ω–æ–≥–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É...")
            await self._load_all_data_full(total_hours_needed)
        
        logger.info("üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    async def _load_missing_data_optimized(self, symbols_details: List[Dict], hours: int):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        symbols_to_load = [
            detail for detail in symbols_details 
            if detail['needs_loading']
        ]
        
        if not symbols_to_load:
            logger.info("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã, –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return
        
        logger.info(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(symbols_to_load)} —Å–∏–º–≤–æ–ª–æ–≤...")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏
        critical_symbols = [s for s in symbols_to_load if s['quality'] == 'critical']
        poor_symbols = [s for s in symbols_to_load if s['quality'] == 'poor']
        fair_symbols = [s for s in symbols_to_load if s['quality'] == 'fair']
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        for priority_group, group_name in [
            (critical_symbols, "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö"),
            (poor_symbols, "–ø–ª–æ—Ö–∏—Ö"),
            (fair_symbols, "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö")
        ]:
            if priority_group:
                logger.info(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ {group_name} –¥–∞–Ω–Ω—ã—Ö ({len(priority_group)} —Å–∏–º–≤–æ–ª–æ–≤)...")
                await self._load_symbols_batch(priority_group, hours)

    async def _load_all_data_full(self, hours: int):
        """–ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        logger.info(f"üì• –ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(self.trading_pairs)} —Å–∏–º–≤–æ–ª–æ–≤...")
        
        symbols_details = [{'symbol': symbol} for symbol in self.trading_pairs]
        await self._load_symbols_batch(symbols_details, hours)

    async def _load_symbols_batch(self, symbols_details: List[Dict], hours: int):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä—É–ø–ø—ã —Å–∏–º–≤–æ–ª–æ–≤ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
        batch_size = 3  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ API
        
        for i in range(0, len(symbols_details), batch_size):
            batch = symbols_details[i:i + batch_size]
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            tasks = []
            for symbol_detail in batch:
                symbol = symbol_detail['symbol']
                task = self._load_symbol_data_optimized(symbol, hours)
                tasks.append(task)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            try:
                await asyncio.gather(*tasks, return_exceptions=True)
                logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω –ø–∞–∫–µ—Ç {i//batch_size + 1}/{(len(symbols_details) + batch_size - 1)//batch_size}")
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ API
                if i + batch_size < len(symbols_details):
                    await asyncio.sleep(2.0)
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–∫–µ—Ç–∞: {e}")

    async def _load_symbol_data_optimized(self, symbol: str, hours: int):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
            loading_periods = await self.alert_manager.db_manager.optimize_missing_data_loading(symbol, hours)
            
            if not loading_periods:
                logger.debug(f"‚úÖ {symbol}: –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã, –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                return
            
            logger.info(f"üì• {symbol}: –ó–∞–≥—Ä—É–∑–∫–∞ {len(loading_periods)} –ø–µ—Ä–∏–æ–¥–æ–≤...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∂–¥—ã–π –ø–µ—Ä–∏–æ–¥
            for i, period in enumerate(loading_periods):
                try:
                    await self._load_period_from_exchange(
                        symbol, 
                        period['start_unix'], 
                        period['end_unix']
                    )
                    
                    logger.debug(f"‚úÖ {symbol}: –ü–µ—Ä–∏–æ–¥ {i+1}/{len(loading_periods)} –∑–∞–≥—Ä—É–∂–µ–Ω")
                    
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –ø–µ—Ä–∏–æ–¥–∞–º–∏
                    if i < len(loading_periods) - 1:
                        await asyncio.sleep(0.5)
                        
                except Exception as e:
                    logger.error(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–∏–æ–¥–∞ {i+1}: {e}")
                    continue
            
            logger.info(f"‚úÖ {symbol}: –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")

    async def _load_period_from_exchange(self, symbol: str, start_time_unix: int, end_time_unix: int):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Å –±–∏—Ä–∂–∏"""
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –≤ –ø–µ—Ä–∏–æ–¥–µ
            duration_minutes = (end_time_unix - start_time_unix) // 60000
            limit = min(duration_minutes + 10, 1000)  # +10 –¥–ª—è –±—É—Ñ–µ—Ä–∞, –º–∞–∫—Å–∏–º—É–º 1000
            
            url = f"{self.rest_url}/v5/market/kline"
            params = {
                'category': 'linear',
                'symbol': symbol,
                'interval': '1',
                'start': start_time_unix,
                'end': end_time_unix,
                'limit': limit
            }
            
            response = requests.get(url, params=params, timeout=20)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
            data = response.json()
            
            if data.get('retCode') == 0:
                klines = data['result']['list']
                klines.reverse()  # Bybit –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                
                saved_count = 0
                skipped_count = 0
                
                for kline in klines:
                    # –ë–∏—Ä–∂–∞ –ø–µ—Ä–µ–¥–∞–µ—Ç UNIX –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                    kline_timestamp_unix = int(kline[0])
                    
                    # –î–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ –º–∏–Ω—É—Ç —Å –Ω—É–ª—è–º–∏
                    rounded_timestamp = (kline_timestamp_unix // 60000) * 60000
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –Ω—É–∂–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                    if not (start_time_unix <= rounded_timestamp < end_time_unix):
                        continue
                    
                    kline_data = {
                        'start': rounded_timestamp,
                        'end': rounded_timestamp + 60000,
                        'open': kline[1],
                        'high': kline[2],
                        'low': kline[3],
                        'close': kline[4],
                        'volume': kline[5],
                        'confirm': True  # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã—Ç—ã
                    }
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–∞ —Å–≤–µ—á–∞ –≤ –±–∞–∑–µ
                    existing = await self._check_candle_exists(symbol, rounded_timestamp)
                    if not existing:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç—É—é —Å–≤–µ—á—É
                        await self.alert_manager.db_manager.save_kline_data(symbol, kline_data, is_closed=True)
                        saved_count += 1
                    else:
                        skipped_count += 1
                
                if saved_count > 0:
                    logger.debug(f"üìä {symbol}: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π, –ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped_count}")
                    
            else:
                logger.error(f"‚ùå API –æ—à–∏–±–∫–∞ –¥–ª—è {symbol}: {data.get('retMsg')}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è {symbol}: {e}")

    async def _check_candle_exists(self, symbol: str, timestamp_unix: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–≤–µ—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ UNIX –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            cursor = self.alert_manager.db_manager.connection.cursor()
            cursor.execute("""
                SELECT 1 FROM kline_data 
                WHERE symbol = %s AND open_time_unix = %s
                LIMIT 1
            """, (symbol, timestamp_unix))
            
            result = cursor.fetchone()
            cursor.close()
            
            return result is not None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–≤–µ—á–∏: {e}")
            return False

    async def connect_websocket(self):
        """üéØ –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–û–ï –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket: {self.ws_url}")
            logger.info(f"üìä –¢–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: {len(self.trading_pairs)}")
            
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–∫–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–∞—Ä
            self.subscribed_pairs.clear()
            self.subscription_confirmed.clear()
            self.failed_subscriptions.clear()
            self.subscription_attempts.clear()
            
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WebSocket
            async with websockets.connect(
                self.ws_url,
                ping_interval=20,  # –£–º–µ–Ω—å—à–∞–µ–º —á–∞—Å—Ç–æ—Ç—É ping
                ping_timeout=15,   # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç ping
                close_timeout=15,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –∑–∞–∫—Ä—ã—Ç–∏—è
                max_size=2**20,    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
                max_queue=32       # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π
            ) as websocket:
                self.websocket = websocket
                self.last_message_time = datetime.utcnow()
                
                # üöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–∞—Ä—ã
                await self._subscribe_conservatively(websocket)
                
                # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–æ–∫
                await asyncio.sleep(15)  # –î–∞–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
                confirmed_count = len(self.subscription_confirmed)
                total_pairs = len(self.trading_pairs)
                success_rate = (confirmed_count / total_pairs) * 100 if total_pairs > 0 else 0
                
                logger.info(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–û–î–ü–ò–°–ö–ò:")
                logger.info(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø–∞—Ä –≤ watchlist: {total_pairs}")
                logger.info(f"   ‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {confirmed_count}")
                logger.info(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
                logger.info(f"   ‚Ä¢ –ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö: {total_pairs - confirmed_count}")
                
                if confirmed_count < total_pairs:
                    unconfirmed = set(self.trading_pairs) - self.subscription_confirmed
                    logger.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã: {sorted(list(unconfirmed))[:10]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                await self.connection_manager.broadcast_json({
                    "type": "connection_status",
                    "status": "connected",
                    "pairs_count": total_pairs,
                    "subscribed_count": len(self.subscribed_pairs),
                    "confirmed_count": confirmed_count,
                    "failed_count": len(self.failed_subscriptions),
                    "success_rate": success_rate,
                    "subscribed_pairs": sorted(list(self.subscription_confirmed)),
                    "update_interval": self.update_interval,
                    "timestamp": datetime.utcnow().isoformat()
                })
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                self.ping_task = asyncio.create_task(self._monitor_connection())
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                async for message in websocket:
                    if not self.is_running:
                        break
                        
                    try:
                        self.last_message_time = datetime.utcnow()
                        self.messages_received += 1
                        
                        data = json.loads(message)
                        await self.handle_message(data)
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
                        if (datetime.utcnow() - self.last_stats_log).total_seconds() > 600:
                            active_pairs = len(self.subscription_confirmed)
                            logger.info(f"üìä WebSocket —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.messages_received} —Å–æ–æ–±—â–µ–Ω–∏–π, –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä: {active_pairs}/{total_pairs}")
                            self.last_stats_log = datetime.utcnow()
                            
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            raise
        finally:
            if self.ping_task:
                self.ping_task.cancel()

    async def _subscribe_conservatively(self, websocket):
        """üéØ –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–ê–Ø —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–æ–≤"""
        total_pairs = len(self.trading_pairs)
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–£–Æ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {total_pairs} –ø–∞—Ä")
        
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ –ø–∞–∫–µ—Ç—ã –∏ –±–æ–ª—å—à–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏
        batch_size = 3  # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ –ø–∞–∫–µ—Ç—ã
        batches_sent = 0
        total_subscribed = 0
        
        for i in range(0, total_pairs, batch_size):
            batch = self.trading_pairs[i:i + batch_size]
            batch_number = i // batch_size + 1
            total_batches = (total_pairs + batch_size - 1) // batch_size
            
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–∞–∫–µ—Ç–∞
                subscribe_message = {
                    "op": "subscribe",
                    "args": [f"kline.1.{pair}" for pair in batch]
                }
                
                logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ {batch_number}/{total_batches}: {len(batch)} –ø–∞—Ä")
                logger.debug(f"   –ü–∞—Ä—ã: {batch}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                await websocket.send(json.dumps(subscribe_message))
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—ã –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö
                for pair in batch:
                    self.subscribed_pairs.add(pair)
                    self.subscription_attempts[pair] = self.subscription_attempts.get(pair, 0) + 1
                
                total_subscribed += len(batch)
                batches_sent += 1
                
                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                await asyncio.sleep(5.0)  # 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
                
                logger.info(f"‚úÖ –ü–∞–∫–µ—Ç {batch_number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü—Ä–æ–≥—Ä–µ—Å—Å: {total_subscribed}/{total_pairs}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞–∫–µ—Ç–∞ {batch_number}: {e}")
                for pair in batch:
                    self.failed_subscriptions.add(pair)
                continue
        
        logger.info(f"üéØ –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logger.info(f"   ‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: {batches_sent}/{total_batches}")
        logger.info(f"   ‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {total_subscribed}/{total_pairs}")
        logger.info(f"   ‚Ä¢ –û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: {len(self.failed_subscriptions)}")

    async def _monitor_connection(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        while self.is_running:
            try:
                await asyncio.sleep(120)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
                
                if self.last_message_time:
                    time_since_last_message = (datetime.utcnow() - self.last_message_time).total_seconds()
                    
                    if time_since_last_message > 180:  # 3 –º–∏–Ω—É—Ç—ã –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
                        logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç WebSocket —É–∂–µ {time_since_last_message:.0f} —Å–µ–∫—É–Ω–¥")
                        
                        await self.connection_manager.broadcast_json({
                            "type": "connection_status",
                            "status": "disconnected",
                            "reason": "No messages received",
                            "timestamp": datetime.utcnow().isoformat()
                        })
                        break
                        
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")

    async def handle_message(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–æ–∫"""
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if 'success' in data:
                if data['success']:
                    logger.debug("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ WebSocket –ø–∞–∫–µ—Ç")
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ
                    if 'request' in data and 'args' in data['request']:
                        for arg in data['request']['args']:
                            if arg.startswith('kline.1.'):
                                pair = arg.replace('kline.1.', '')
                                if pair in self.trading_pairs:  # –í–ê–ñ–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞ –≤ watchlist
                                    self.subscription_confirmed.add(pair)
                                    logger.debug(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {pair}")
                                else:
                                    logger.warning(f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {pair}, –Ω–æ –ø–∞—Ä—ã –Ω–µ—Ç –≤ watchlist")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ WebSocket: {data}")
                return
                
            if 'op' in data:
                logger.debug(f"üîß –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ WebSocket: {data}")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
            if data.get('topic', '').startswith('kline.1.'):
                kline_data = data['data'][0]
                symbol = data['topic'].split('.')[-1]
                
                # üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
                if symbol in self.trading_pairs:
                    if symbol not in self.subscription_confirmed:
                        self.subscription_confirmed.add(symbol)
                        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç {symbol}, –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                else:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç {symbol}, –Ω–æ –ø–∞—Ä—ã –ù–ï–¢ –≤ watchlist!")
                    return
                
                # –ë–∏—Ä–∂–∞ –ø–µ—Ä–µ–¥–∞–µ—Ç UNIX –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                start_time_unix = int(kline_data['start'])
                end_time_unix = int(kline_data['end'])
                is_closed = kline_data.get('confirm', False)
                
                # –î–ª—è –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–≤–ª—è–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã, –Ω–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–≤–µ—á–µ–π - –æ–∫—Ä—É–≥–ª—è–µ–º
                if is_closed:
                    # –ó–∞–∫—Ä—ã—Ç—ã–µ —Å–≤–µ—á–∏ —Å –Ω—É–ª—è–º–∏ –≤ –∫–æ–Ω—Ü–µ (1687958700000)
                    start_time_unix = (start_time_unix // 60000) * 60000
                    end_time_unix = (end_time_unix // 60000) * 60000
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                formatted_data = {
                    'start': start_time_unix,
                    'end': end_time_unix,
                    'open': kline_data['open'],
                    'high': kline_data['high'],
                    'low': kline_data['low'],
                    'close': kline_data['close'],
                    'volume': kline_data['volume'],
                    'confirm': is_closed
                }
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–≤–µ—á–µ–π
                if is_closed:
                    logger.debug(f"WebSocket kline_update: {symbol} –∑–∞–∫—Ä—ã—Ç–∞—è —Å–≤–µ—á–∞, timestamp={start_time_unix}")
                
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–≤–µ—á–µ–π
                if is_closed:
                    last_processed = self.processed_candles.get(symbol, 0)
                    if start_time_unix > last_processed:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –∞–ª–µ—Ä—Ç–æ–≤
                        alerts = await self.alert_manager.process_kline_data(symbol, formatted_data)
                        
                        # –ü–æ–º–µ—á–∞–µ–º —Å–≤–µ—á—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
                        self.processed_candles[symbol] = start_time_unix
                        
                        if alerts:
                            logger.info(f"üö® –°–æ–∑–¥–∞–Ω–æ {len(alerts)} –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è {symbol}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É (—Ñ–æ—Ä–º–∏—Ä—É—é—â–∏–µ—Å—è –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã–µ)
                await self.alert_manager.db_manager.save_kline_data(symbol, formatted_data, is_closed)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞–º (–ø–æ—Ç–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
                stream_item = {
                    "type": "kline_update",
                    "symbol": symbol,
                    "data": formatted_data,
                    "timestamp": datetime.utcnow().isoformat(),
                    "is_closed": is_closed,
                    "server_timestamp": self.alert_manager._get_current_timestamp_ms() if hasattr(self.alert_manager, '_get_current_timestamp_ms') else int(datetime.utcnow().timestamp() * 1000)
                }
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –≤ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
                logger.debug(f"WebSocket –æ—Ç–ø—Ä–∞–≤–∫–∞ kline_update: {symbol}, server_timestamp={stream_item['server_timestamp']}")
                
                await self.connection_manager.broadcast_json(stream_item)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ kline –¥–∞–Ω–Ω—ã—Ö: {e}")