import logging
import os
from typing import Dict, Optional, List
from datetime import datetime, timedelta, timezone
from enum import Enum
import asyncio
import aiohttp

logger = logging.getLogger(__name__)


class AlertType(Enum):
    VOLUME_SPIKE = "volume_spike"
    CONSECUTIVE_LONG = "consecutive_long"
    PRIORITY = "priority"


class AlertStatus(Enum):
    PENDING = "pending"
    TRUE_SIGNAL = "true_signal"
    FALSE_SIGNAL = "false_signal"
    CLOSED = "closed"


class ImbalanceAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–º–±–∞–ª–∞–Ω—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π Smart Money"""

    def __init__(self):
        self.min_gap_percentage = 0.1  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≥—ç–ø–∞ –≤ %
        self.min_strength = 0.5  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞

    def analyze_fair_value_gap(self, candles: List[Dict]) -> Optional[Dict]:
        """–ê–Ω–∞–ª–∏–∑ Fair Value Gap"""
        if len(candles) < 3:
            return None

        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–≤–µ—á–∏
        prev_candle = candles[-3]
        current_candle = candles[-2]
        next_candle = candles[-1]

        # Bullish FVG: –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å–≤–µ—á–∞ low > —Å–ª–µ–¥—É—é—â–∞—è —Å–≤–µ—á–∞ high
        if prev_candle['low'] > next_candle['high'] and current_candle['is_long']:
            gap_size = (prev_candle['low'] - next_candle['high']) / next_candle['high'] * 100
            if gap_size >= self.min_gap_percentage:
                return {
                    'type': 'fair_value_gap',
                    'direction': 'bullish',
                    'strength': gap_size,
                    'top': prev_candle['low'],
                    'bottom': next_candle['high'],
                    'timestamp': current_candle['timestamp']
                }

        # Bearish FVG: –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å–≤–µ—á–∞ high < —Å–ª–µ–¥—É—é—â–∞—è —Å–≤–µ—á–∞ low
        if prev_candle['high'] < next_candle['low'] and not current_candle['is_long']:
            gap_size = (next_candle['low'] - prev_candle['high']) / prev_candle['high'] * 100
            if gap_size >= self.min_gap_percentage:
                return {
                    'type': 'fair_value_gap',
                    'direction': 'bearish',
                    'strength': gap_size,
                    'top': next_candle['low'],
                    'bottom': prev_candle['high'],
                    'timestamp': current_candle['timestamp']
                }

        return None

    def analyze_order_block(self, candles: List[Dict]) -> Optional[Dict]:
        """–ê–Ω–∞–ª–∏–∑ Order Block"""
        if len(candles) < 10:
            return None

        current_candle = candles[-1]
        window = candles[-10:-1]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 9 —Å–≤–µ—á–µ–π –ø–µ—Ä–µ–¥ —Ç–µ–∫—É—â–µ–π

        # Bullish Order Block: –ø–æ—Å–ª–µ–¥–Ω—è—è –º–µ–¥–≤–µ–∂—å—è —Å–≤–µ—á–∞ –ø–µ—Ä–µ–¥ —Å–∏–ª—å–Ω—ã–º –≤–æ—Å—Ö–æ–¥—è—â–∏–º –¥–≤–∏–∂–µ–Ω–∏–µ–º
        last_bearish = None
        for candle in reversed(window):
            if not candle['is_long']:
                last_bearish = candle
                break

        if last_bearish and current_candle['is_long']:
            price_move = (current_candle['close'] - last_bearish['high']) / last_bearish['high'] * 100
            if price_move >= 2.0:  # –î–≤–∏–∂–µ–Ω–∏–µ –º–∏–Ω–∏–º—É–º –Ω–∞ 2%
                return {
                    'type': 'order_block',
                    'direction': 'bullish',
                    'strength': price_move,
                    'top': last_bearish['high'],
                    'bottom': last_bearish['low'],
                    'timestamp': last_bearish['timestamp']
                }

        # Bearish Order Block: –ø–æ—Å–ª–µ–¥–Ω—è—è –±—ã—á—å—è —Å–≤–µ—á–∞ –ø–µ—Ä–µ–¥ —Å–∏–ª—å–Ω—ã–º –Ω–∏—Å—Ö–æ–¥—è—â–∏–º –¥–≤–∏–∂–µ–Ω–∏–µ–º
        last_bullish = None
        for candle in reversed(window):
            if candle['is_long']:
                last_bullish = candle
                break

        if last_bullish and not current_candle['is_long']:
            price_move = (last_bullish['low'] - current_candle['close']) / last_bullish['low'] * 100
            if price_move >= 2.0:  # –î–≤–∏–∂–µ–Ω–∏–µ –º–∏–Ω–∏–º—É–º –Ω–∞ 2%
                return {
                    'type': 'order_block',
                    'direction': 'bearish',
                    'strength': price_move,
                    'top': last_bullish['high'],
                    'bottom': last_bullish['low'],
                    'timestamp': last_bullish['timestamp']
                }

        return None

    def analyze_breaker_block(self, candles: List[Dict]) -> Optional[Dict]:
        """–ê–Ω–∞–ª–∏–∑ Breaker Block (–ø—Ä–æ–±–∏—Ç—ã–π Order Block)"""
        if len(candles) < 15:
            return None

        # –ò—â–µ–º –ø—Ä–æ–±–∏—Ç—ã–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        current_candle = candles[-1]
        window = candles[-15:-1]

        # –ù–∞—Ö–æ–¥–∏–º –∑–Ω–∞—á–∏–º—ã–µ —É—Ä–æ–≤–Ω–∏
        highs = [c['high'] for c in window]
        lows = [c['low'] for c in window]

        max_high = max(highs)
        min_low = min(lows)

        # Bullish Breaker: –ø—Ä–æ–±–∏—Ç–∏–µ –≤–Ω–∏–∑ —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤–≤–µ—Ä—Ö
        if current_candle['close'] > max_high and current_candle['is_long']:
            strength = (current_candle['close'] - max_high) / max_high * 100
            if strength >= 1.0:
                return {
                    'type': 'breaker_block',
                    'direction': 'bullish',
                    'strength': strength,
                    'top': max_high,
                    'bottom': min_low,
                    'timestamp': current_candle['timestamp']
                }

        # Bearish Breaker: –ø—Ä–æ–±–∏—Ç–∏–µ –≤–≤–µ—Ä—Ö —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤–Ω–∏–∑
        if current_candle['close'] < min_low and not current_candle['is_long']:
            strength = (min_low - current_candle['close']) / min_low * 100
            if strength >= 1.0:
                return {
                    'type': 'breaker_block',
                    'direction': 'bearish',
                    'strength': strength,
                    'top': max_high,
                    'bottom': min_low,
                    'timestamp': current_candle['timestamp']
                }

        return None


class AlertManager:
    def __init__(self, db_manager, telegram_bot=None, connection_manager=None, time_sync=None):
        self.db_manager = db_manager
        self.telegram_bot = telegram_bot
        self.connection_manager = connection_manager
        self.time_sync = time_sync
        self.imbalance_analyzer = ImbalanceAnalyzer()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.settings = {
            'volume_alerts_enabled': True,
            'consecutive_alerts_enabled': True,
            'priority_alerts_enabled': True,
            'analysis_hours': int(os.getenv('ANALYSIS_HOURS', 1)),
            'offset_minutes': int(os.getenv('OFFSET_MINUTES', 0)),
            'volume_multiplier': float(os.getenv('VOLUME_MULTIPLIER', 2.0)),
            'min_volume_usdt': int(os.getenv('MIN_VOLUME_USDT', 1000)),
            'consecutive_long_count': int(os.getenv('CONSECUTIVE_LONG_COUNT', 5)),
            'alert_grouping_minutes': int(os.getenv('ALERT_GROUPING_MINUTES', 5)),
            'data_retention_hours': int(os.getenv('DATA_RETENTION_HOURS', 2)),
            'update_interval_seconds': int(os.getenv('UPDATE_INTERVAL_SECONDS', 1)),
            'notification_enabled': True,
            'volume_type': 'long',
            'orderbook_enabled': False,
            'orderbook_snapshot_on_alert': False,
            'imbalance_enabled': True,
            'fair_value_gap_enabled': True,
            'order_block_enabled': True,
            'breaker_block_enabled': True,
            'pairs_check_interval_minutes': int(os.getenv('PAIRS_CHECK_INTERVAL_MINUTES', 30))
        }

        # –ö—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤ (timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö UTC)
        self.alert_cooldowns = {}  # symbol -> last alert timestamp_ms

        logger.info(f"AlertManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –≤—Ä–µ–º–µ–Ω–∏ UTC: {self.time_sync is not None}")

    def _get_current_timestamp_ms(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π UTC timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö"""
        if self.time_sync:
            timestamp = self.time_sync.get_utc_timestamp_ms()
            logger.debug(f"‚è∞ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ UTC –≤—Ä–µ–º—è: {timestamp}")
            return timestamp
        else:
            # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ UTC –≤—Ä–µ–º—è
            timestamp = int(datetime.now(timezone.utc).timestamp() * 1000)
            logger.debug(f"‚è∞ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ UTC –≤—Ä–µ–º—è (fallback): {timestamp}")
            return timestamp

    async def process_kline_data(self, symbol: str, kline_data: Dict) -> List[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–æ–≤"""
        alerts = []

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏
            if self.time_sync and hasattr(self.time_sync, 'is_candle_closed'):
                is_closed = self.time_sync.is_candle_closed(kline_data)
                logger.debug(f"üïê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏ {symbol} —á–µ—Ä–µ–∑ time_sync: {is_closed}")
            else:
                is_closed = kline_data.get('confirm', False)
                logger.debug(f"üïê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏ {symbol} —á–µ—Ä–µ–∑ confirm: {is_closed}")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–ª–µ—Ä—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–≤–µ—á–µ–π
            if is_closed:
                logger.debug(f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–∏ {symbol}")
                alerts = await self._process_closed_candle(symbol, kline_data)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã
            for alert in alerts:
                await self._send_alert(alert)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–∏ –¥–ª—è {symbol}: {e}")

        return alerts

    async def _process_closed_candle(self, symbol: str, kline_data: Dict) -> List[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–∏ - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–æ–≤"""
        alerts = []

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç –ø–æ –æ–±—ä–µ–º—É
            if self.settings['volume_alerts_enabled']:
                volume_alert = await self._check_volume_alert(symbol, kline_data)
                if volume_alert:
                    alerts.append(volume_alert)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ LONG —Å–≤–µ—á–∏
            if self.settings['consecutive_alerts_enabled']:
                consecutive_alert = await self._check_consecutive_long_alert(symbol, kline_data)
                if consecutive_alert:
                    alerts.append(consecutive_alert)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            if self.settings['priority_alerts_enabled']:
                priority_alert = await self._check_priority_signal(symbol, alerts)
                if priority_alert:
                    alerts.append(priority_alert)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–∏ –¥–ª—è {symbol}: {e}")

        return alerts

    async def _check_volume_alert(self, symbol: str, kline_data: Dict) -> Optional[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–∞ –ø–æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—é –æ–±—ä–µ–º–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–≤–µ—á–∞ LONG
            is_long = float(kline_data['close']) > float(kline_data['open'])
            if not is_long:
                return None

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–º –≤ USDT
            current_volume_usdt = float(kline_data['volume']) * float(kline_data['close'])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º
            if current_volume_usdt < self.settings['min_volume_usdt']:
                return None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º timestamp –≤ –º—Å UTC)
            current_timestamp_ms = self._get_current_timestamp_ms()
            if symbol in self.alert_cooldowns:
                last_alert_timestamp_ms = self.alert_cooldowns[symbol]
                cooldown_period_ms = self.settings['alert_grouping_minutes'] * 60 * 1000
                if (current_timestamp_ms - last_alert_timestamp_ms) < cooldown_period_ms:
                    return None

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –æ–±—ä–µ–º—ã
            historical_volumes = await self.db_manager.get_historical_long_volumes(
                symbol,
                self.settings['analysis_hours'],
                offset_minutes=self.settings['offset_minutes'],
                volume_type=self.settings['volume_type']
            )

            if len(historical_volumes) < 10:
                logger.debug(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {len(historical_volumes)}")
                return None

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º
            average_volume = sum(historical_volumes) / len(historical_volumes)
            volume_ratio = current_volume_usdt / average_volume if average_volume > 0 else 0

            logger.debug(
                f"{symbol}: –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º {current_volume_usdt:.0f}, —Å—Ä–µ–¥–Ω–∏–π {average_volume:.0f}, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç {volume_ratio:.2f}")

            if volume_ratio >= self.settings['volume_multiplier']:
                current_price = float(kline_data['close'])

                # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –¥–ª—è –∞–ª–µ—Ä—Ç–∞
                candle_data = {
                    'open': float(kline_data['open']),
                    'high': float(kline_data['high']),
                    'low': float(kline_data['low']),
                    'close': current_price,
                    'volume': float(kline_data['volume']),
                    'alert_level': current_price
                }

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º–±–∞–ª–∞–Ω—Å
                imbalance_data = None
                has_imbalance = False
                if self.settings.get('imbalance_enabled', False):
                    imbalance_data = await self._analyze_imbalance(symbol)
                    has_imbalance = imbalance_data is not None

                # –ü–æ–ª—É—á–∞–µ–º —Å–Ω–∏–º–æ–∫ —Å—Ç–∞–∫–∞–Ω–∞, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                order_book_snapshot = None
                if self.settings.get('orderbook_snapshot_on_alert', False):
                    order_book_snapshot = await self._get_order_book_snapshot(symbol)

                alert_data = {
                    'symbol': symbol,
                    'alert_type': AlertType.VOLUME_SPIKE.value,
                    'price': current_price,
                    'volume_ratio': round(volume_ratio, 2),
                    'current_volume_usdt': int(current_volume_usdt),
                    'average_volume_usdt': int(average_volume),
                    'timestamp': current_timestamp_ms,  # UTC timestamp –≤ –º—Å
                    'close_timestamp': current_timestamp_ms,
                    'is_closed': True,
                    'is_true_signal': True,  # –ó–∞–∫—Ä—ã—Ç–∞—è LONG —Å–≤–µ—á–∞ = –∏—Å—Ç–∏–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
                    'has_imbalance': has_imbalance,
                    'imbalance_data': imbalance_data,
                    'candle_data': candle_data,
                    'order_book_snapshot': order_book_snapshot,
                    'message': f"–û–±—ä–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω –≤ {volume_ratio:.2f}x —Ä–∞–∑ (–∏—Å—Ç–∏–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª)"
                }

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω (timestamp –≤ –º—Å UTC)
                self.alert_cooldowns[symbol] = current_timestamp_ms

                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –∞–ª–µ—Ä—Ç –ø–æ –æ–±—ä–µ–º—É –¥–ª—è {symbol}: {volume_ratio:.2f}x (UTC –≤—Ä–µ–º—è)")
                return alert_data

            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–∞ –ø–æ –æ–±—ä–µ–º—É –¥–ª—è {symbol}: {e}")
            return None

    async def _analyze_imbalance(self, symbol: str) -> Optional[Dict]:
        """–ê–Ω–∞–ª–∏–∑ –∏–º–±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            candles = await self.db_manager.get_recent_candles(symbol, 20)

            if len(candles) < 15:
                return None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Fair Value Gap
            if self.settings.get('fair_value_gap_enabled', True):
                fvg = self.imbalance_analyzer.analyze_fair_value_gap(candles)
                if fvg:
                    return fvg

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Order Block
            if self.settings.get('order_block_enabled', True):
                ob = self.imbalance_analyzer.analyze_order_block(candles)
                if ob:
                    return ob

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Breaker Block
            if self.settings.get('breaker_block_enabled', True):
                bb = self.imbalance_analyzer.analyze_breaker_block(candles)
                if bb:
                    return bb

            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–º–±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {symbol}: {e}")
            return None

    async def _get_order_book_snapshot(self, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–Ω–∏–º–∫–∞ —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫"""
        try:
            if not self.settings.get('orderbook_enabled', False):
                return None

            url = f"https://api.bybit.com/v5/market/orderbook"
            params = {
                'category': 'linear',
                'symbol': symbol,
                'limit': 25
            }

            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get('retCode') == 0:
                            result = data['result']
                            return {
                                'bids': [[float(bid[0]), float(bid[1])] for bid in result.get('b', [])],
                                'asks': [[float(ask[0]), float(ask[1])] for ask in result.get('a', [])],
                                'timestamp': self._get_current_timestamp_ms()  # UTC timestamp –≤ –º—Å
                            }

            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–∞ –¥–ª—è {symbol}: {e}")
            return None

    async def _check_consecutive_long_alert(self, symbol: str, kline_data: Dict) -> Optional[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–∞ –ø–æ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏–º LONG —Å–≤–µ—á–∞–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏
            recent_candles = await self.db_manager.get_recent_candles(symbol,
                                                                      self.settings['consecutive_long_count'] + 5)

            if len(recent_candles) < self.settings['consecutive_long_count']:
                return None

            # –°—á–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ LONG —Å–≤–µ—á–∏ —Å –∫–æ–Ω—Ü–∞
            consecutive_count = 0
            for candle in reversed(recent_candles):
                if candle['is_long'] and candle['is_closed']:
                    consecutive_count += 1
                else:
                    break

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –ª–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if consecutive_count >= self.settings['consecutive_long_count']:
                current_timestamp_ms = self._get_current_timestamp_ms()
                current_price = float(kline_data['close'])

                # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏
                candle_data = {
                    'open': float(kline_data['open']),
                    'high': float(kline_data['high']),
                    'low': float(kline_data['low']),
                    'close': current_price,
                    'volume': float(kline_data['volume'])
                }

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º–±–∞–ª–∞–Ω—Å
                imbalance_data = await self._analyze_imbalance(symbol)
                has_imbalance = imbalance_data is not None

                alert_data = {
                    'symbol': symbol,
                    'alert_type': AlertType.CONSECUTIVE_LONG.value,
                    'price': current_price,
                    'consecutive_count': consecutive_count,
                    'timestamp': current_timestamp_ms,  # UTC timestamp –≤ –º—Å
                    'close_timestamp': current_timestamp_ms,
                    'is_closed': True,
                    'has_imbalance': has_imbalance,
                    'imbalance_data': imbalance_data,
                    'candle_data': candle_data,
                    'message': f"{consecutive_count} –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö LONG —Å–≤–µ—á–µ–π (–∑–∞–∫—Ä—ã—Ç—ã—Ö)"
                }

                logger.info(f"‚úÖ –ê–ª–µ—Ä—Ç –ø–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è {symbol}: {consecutive_count} LONG —Å–≤–µ—á–µ–π (UTC –≤—Ä–µ–º—è)")
                return alert_data

            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö LONG —Å–≤–µ—á–µ–π –¥–ª—è {symbol}: {e}")
            return None

    async def _check_priority_signal(self, symbol: str, current_alerts: List[Dict]) -> Optional[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è, –µ—Å–ª–∏ –µ—Å—Ç—å –∏ –æ–±—ä–µ–º–Ω—ã–π –∞–ª–µ—Ä—Ç, –∏ –∞–ª–µ—Ä—Ç –ø–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            volume_alert = None
            consecutive_alert = None

            for alert in current_alerts:
                if alert['alert_type'] == AlertType.VOLUME_SPIKE.value:
                    volume_alert = alert
                elif alert['alert_type'] == AlertType.CONSECUTIVE_LONG.value:
                    consecutive_alert = alert

            # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –æ–±—ä–µ–º–Ω—ã–π –∞–ª–µ—Ä—Ç –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ–∫—É—â–µ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if consecutive_alert:
                recent_volume_alert = await self._check_recent_volume_alert(symbol,
                                                                            consecutive_alert['consecutive_count'])

                if volume_alert or recent_volume_alert:
                    candle_data = consecutive_alert.get('candle_data', {})
                    if volume_alert and volume_alert.get('candle_data'):
                        candle_data.update(volume_alert['candle_data'])

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
                    has_imbalance = False
                    imbalance_data = None
                    if volume_alert and volume_alert.get('has_imbalance'):
                        has_imbalance = True
                        imbalance_data = volume_alert.get('imbalance_data')
                    elif consecutive_alert and consecutive_alert.get('has_imbalance'):
                        has_imbalance = True
                        imbalance_data = consecutive_alert.get('imbalance_data')

                    current_timestamp_ms = self._get_current_timestamp_ms()

                    priority_data = {
                        'symbol': symbol,
                        'alert_type': AlertType.PRIORITY.value,
                        'price': consecutive_alert['price'],
                        'consecutive_count': consecutive_alert['consecutive_count'],
                        'timestamp': current_timestamp_ms,  # UTC timestamp –≤ –º—Å
                        'close_timestamp': current_timestamp_ms,
                        'is_closed': True,
                        'has_imbalance': has_imbalance,
                        'imbalance_data': imbalance_data,
                        'candle_data': candle_data,
                        'message': f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª: {consecutive_alert['consecutive_count']} LONG —Å–≤–µ—á–µ–π + –≤—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞{' + –∏–º–±–∞–ª–∞–Ω—Å' if has_imbalance else ''}"
                    }

                    if volume_alert:
                        priority_data.update({
                            'volume_ratio': volume_alert['volume_ratio'],
                            'current_volume_usdt': volume_alert['current_volume_usdt'],
                            'average_volume_usdt': volume_alert['average_volume_usdt']
                        })

                    logger.info(f"‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –∞–ª–µ—Ä—Ç –¥–ª—è {symbol} (UTC –≤—Ä–µ–º—è)")
                    return priority_data

            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}: {e}")
            return None

    async def _check_recent_volume_alert(self, symbol: str, candles_back: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ –æ–±—ä–µ–º–Ω—ã–π –∞–ª–µ—Ä—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N —Å–≤–µ—á–∞—Ö"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –∞–ª–µ—Ä—Ç—ã –ø–æ –æ–±—ä–µ–º—É –¥–ª—è —Å–∏–º–≤–æ–ª–∞
            recent_alerts = await self.db_manager.get_recent_volume_alerts(
                symbol,
                minutes_back=candles_back
            )

            return len(recent_alerts) > 0

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–¥–∞–≤–Ω–∏—Ö –æ–±—ä–µ–º–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è {symbol}: {e}")
            return False

    async def _send_alert(self, alert_data: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞"""
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–∞
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ {alert_data['alert_type']} –¥–ª—è {alert_data['symbol']}")
            logger.info(f"‚è∞ –í—Ä–µ–º—è –∞–ª–µ—Ä—Ç–∞ (UTC timestamp_ms): {alert_data.get('timestamp')}")
            logger.info(
                f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏: {self.time_sync.get_sync_status()['status'] if self.time_sync else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            alert_id = await self.db_manager.save_alert(alert_data)
            alert_data['id'] = alert_id

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ WebSocket
            if self.connection_manager:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –≤ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ
                websocket_data = {
                    'type': 'new_alert',
                    'alert': self._serialize_alert(alert_data),
                    'server_timestamp': self._get_current_timestamp_ms(),
                    'utc_synced': self.time_sync.get_sync_status()['is_synced'] if self.time_sync else False
                }
                await self.connection_manager.broadcast_json(websocket_data)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            if self.telegram_bot:
                if alert_data['alert_type'] == AlertType.VOLUME_SPIKE.value:
                    await self.telegram_bot.send_volume_alert(alert_data)
                elif alert_data['alert_type'] == AlertType.CONSECUTIVE_LONG.value:
                    await self.telegram_bot.send_consecutive_alert(alert_data)
                elif alert_data['alert_type'] == AlertType.PRIORITY.value:
                    await self.telegram_bot.send_priority_alert(alert_data)

            logger.info(f"‚úÖ –ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {alert_data['symbol']} - {alert_data['alert_type']}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")

    def _serialize_alert(self, alert_data: Dict) -> Dict:
        """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–∞ –¥–ª—è JSON"""
        serialized = alert_data.copy()

        # –í—Å–µ timestamp —É–∂–µ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö UTC, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –Ω–µ –Ω—É–∂–Ω–æ
        return serialized

    def update_settings(self, new_settings: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.settings.update(new_settings)
        logger.info(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AlertManager –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {self.settings}")

    def get_settings(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        return self.settings.copy()

    async def cleanup_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û—á–∏—â–∞–µ–º –∫—É–ª–¥–∞—É–Ω—ã (—Å—Ç–∞—Ä—à–µ —á–∞—Å–∞) - –∏—Å–ø–æ–ª—å–∑—É–µ–º timestamp –≤ –º—Å UTC
            current_timestamp_ms = self._get_current_timestamp_ms()
            cooldown_cutoff_ms = current_timestamp_ms - (60 * 60 * 1000)  # 1 —á–∞—Å –≤ –º—Å

            for symbol in list(self.alert_cooldowns.keys()):
                if self.alert_cooldowns[symbol] < cooldown_cutoff_ms:
                    del self.alert_cooldowns[symbol]

            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")