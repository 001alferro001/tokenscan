import asyncio
import logging
import aiohttp
from datetime import datetime, timedelta
from typing import Optional, Dict, List
import time

logger = logging.getLogger(__name__)


class TimeServerSync:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    
    def __init__(self):
        # –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        self.time_servers = [
            "http://worldtimeapi.org/api/timezone/UTC",
            "https://timeapi.io/api/Time/current/zone?timeZone=UTC",
            "http://worldclockapi.com/api/json/utc/now"
        ]
        self.last_sync = None
        self.time_offset_ms = 0  # –°–º–µ—â–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–æ—á–Ω–æ–≥–æ UTC
        self.is_synced = False
        
    async def sync_with_time_servers(self) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        for server_url in self.time_servers:
            try:
                success = await self._sync_with_server(server_url)
                if success:
                    self.is_synced = True
                    self.last_sync = datetime.utcnow()
                    logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —É—Å–ø–µ—à–Ω–∞: {server_url}")
                    logger.info(f"‚è∞ –°–º–µ—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏: {self.time_offset_ms}–º—Å")
                    return True
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å {server_url}: {e}")
                continue
        
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∏ —Å –æ–¥–Ω–∏–º —Å–µ—Ä–≤–µ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        return False
    
    async def _sync_with_server(self, server_url: str) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º"""
        try:
            # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –¥–æ –∑–∞–ø—Ä–æ—Å–∞
            local_time_before = time.time() * 1000
            
            timeout = aiohttp.ClientTimeout(total=5)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.get(server_url) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
                        local_time_after = time.time() * 1000
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º UTC –≤—Ä–µ–º—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
                        server_time_ms = self._extract_utc_time(data, server_url)
                        if server_time_ms is None:
                            return False
                        
                        # –£—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏
                        network_delay = (local_time_after - local_time_before) / 2
                        adjusted_local_time = local_time_before + network_delay
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ
                        self.time_offset_ms = server_time_ms - adjusted_local_time
                        
                        return True
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å {server_url}: {e}")
            return False
    
    def _extract_utc_time(self, data: Dict, server_url: str) -> Optional[int]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ UTC –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            if "worldtimeapi.org" in server_url:
                # WorldTimeAPI
                utc_datetime = data.get('utc_datetime')
                if utc_datetime:
                    dt = datetime.fromisoformat(utc_datetime.replace('Z', '+00:00'))
                    return int(dt.timestamp() * 1000)
            
            elif "timeapi.io" in server_url:
                # TimeAPI.io
                date_time = data.get('dateTime')
                if date_time:
                    dt = datetime.fromisoformat(date_time.replace('Z', '+00:00'))
                    return int(dt.timestamp() * 1000)
            
            elif "worldclockapi.com" in server_url:
                # WorldClockAPI
                current_date_time = data.get('currentDateTime')
                if current_date_time:
                    dt = datetime.fromisoformat(current_date_time.replace('Z', '+00:00'))
                    return int(dt.timestamp() * 1000)
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ {server_url}: {e}")
            return None
    
    def get_accurate_utc_timestamp_ms(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—ã–π UTC timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö"""
        if self.is_synced:
            local_time_ms = time.time() * 1000
            return int(local_time_ms + self.time_offset_ms)
        else:
            # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ UTC –≤—Ä–µ–º—è
            return int(datetime.utcnow().timestamp() * 1000)
    
    def get_sync_status(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        return {
            'is_synced': self.is_synced,
            'last_sync': self.last_sync.isoformat() if self.last_sync else None,
            'time_offset_ms': self.time_offset_ms,
            'sync_age_seconds': (datetime.utcnow() - self.last_sync).total_seconds() if self.last_sync else None,
            'accurate_utc_time': self.get_accurate_utc_timestamp_ms(),
            'status': 'synced' if self.is_synced else 'not_synced'
        }


class ExchangeTimeSync:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å –±–∏—Ä–∂–µ–π Bybit –∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏ —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""

    def __init__(self):
        self.exchange_time_offset = 0  # –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ª–æ–∫–∞–ª—å–Ω—ã–º –∏ –±–∏—Ä–∂–µ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –≤ –º—Å
        self.last_exchange_sync = None
        self.exchange_sync_interval = 300  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–∏—Ä–∂–µ–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        self.is_running = False
        self.is_exchange_synced = False
        self.sync_task = None
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        self.time_server_sync = TimeServerSync()
        self.time_server_sync_interval = 3600  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—ã–π —á–∞—Å
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self.sync_method = 'auto'  # 'auto', 'exchange_only', 'time_servers_only'

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏"""
        self.is_running = True
        logger.info("üïê –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ UTC")

        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        await self.time_server_sync.sync_with_time_servers()

        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–∏—Ä–∂–µ–π
        await self.sync_exchange_time()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        self.sync_task = asyncio.create_task(self._periodic_sync())

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        self.is_running = False
        if self.sync_task:
            self.sync_task.cancel()
            try:
                await self.sync_task
            except asyncio.CancelledError:
                pass
        logger.info("üïê –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    async def _periodic_sync(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏"""
        last_time_server_sync = datetime.utcnow()
        
        while self.is_running:
            try:
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–∏—Ä–∂–µ–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                await asyncio.sleep(self.exchange_sync_interval)
                if self.is_running:
                    await self.sync_exchange_time()
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—ã–π —á–∞—Å
                if (datetime.utcnow() - last_time_server_sync).total_seconds() > self.time_server_sync_interval:
                    await self.time_server_sync.sync_with_time_servers()
                    last_time_server_sync = datetime.utcnow()
                    
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
                await asyncio.sleep(60)  # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def sync_exchange_time(self) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å –±–∏—Ä–∂–µ–π"""
        try:
            url = "https://api.bybit.com/v5/market/time"

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ–µ UTC –≤—Ä–µ–º—è –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
            accurate_time_before = self.time_server_sync.get_accurate_utc_timestamp_ms()

            timeout = aiohttp.ClientTimeout(total=5)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()

                        # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
                        accurate_time_after = self.time_server_sync.get_accurate_utc_timestamp_ms()

                        if data.get('retCode') == 0:
                            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –±–∏—Ä–∂–∏
                            exchange_time_seconds = int(data['result']['timeSecond'])
                            exchange_time_nanos = int(data['result']['timeNano'])

                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
                            exchange_time = exchange_time_seconds * 1000 + (exchange_time_nanos // 1_000_000) % 100

                            # –£—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏
                            network_delay = (accurate_time_after - accurate_time_before) / 2
                            adjusted_accurate_time = accurate_time_before + network_delay

                            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –±–∏—Ä–∂–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–æ—á–Ω–æ–≥–æ UTC
                            self.exchange_time_offset = exchange_time - adjusted_accurate_time
                            self.last_exchange_sync = datetime.utcnow()
                            self.is_exchange_synced = True

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
                            expected_range_min = 1700000000000  # 2023 –≥–æ–¥
                            expected_range_max = 2000000000000  # 2033 –≥–æ–¥

                            if expected_range_min <= exchange_time <= expected_range_max:
                                logger.info(
                                    f"‚úÖ –í—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å –±–∏—Ä–∂–µ–π Bybit. –°–º–µ—â–µ–Ω–∏–µ –±–∏—Ä–∂–∏: {self.exchange_time_offset:.0f}–º—Å")
                                return True
                            else:
                                logger.error(
                                    f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –±–∏—Ä–∂–∏: {exchange_time}")
                                self.is_exchange_synced = False
                                return False
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –±–∏—Ä–∂–∏ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {data.get('retMsg')}")
                    else:
                        logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {response.status}")

        except asyncio.TimeoutError:
            logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å –±–∏—Ä–∂–µ–π")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å –±–∏—Ä–∂–µ–π: {e}")

        self.is_exchange_synced = False
        return False

    def get_utc_timestamp_ms(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—ã–π UTC timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö"""
        if self.sync_method == 'time_servers_only' or not self.is_exchange_synced:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä—ã —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            return self.time_server_sync.get_accurate_utc_timestamp_ms()
        elif self.sync_method == 'exchange_only':
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –±–∏—Ä–∂–µ–≤–æ–µ –≤—Ä–µ–º—è
            accurate_time = self.time_server_sync.get_accurate_utc_timestamp_ms()
            return int(accurate_time + self.exchange_time_offset)
        else:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞–º —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            if self.time_server_sync.is_synced:
                return self.time_server_sync.get_accurate_utc_timestamp_ms()
            elif self.is_exchange_synced:
                accurate_time = self.time_server_sync.get_accurate_utc_timestamp_ms()
                return int(accurate_time + self.exchange_time_offset)
            else:
                # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ UTC –≤—Ä–µ–º—è
                return int(datetime.utcnow().timestamp() * 1000)

    def get_exchange_timestamp_ms(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å timestamp –±–∏—Ä–∂–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö"""
        if self.is_exchange_synced:
            accurate_time = self.time_server_sync.get_accurate_utc_timestamp_ms()
            return int(accurate_time + self.exchange_time_offset)
        else:
            # Fallback –Ω–∞ —Ç–æ—á–Ω–æ–µ UTC –≤—Ä–µ–º—è
            return self.get_utc_timestamp_ms()

    def get_sync_status(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        utc_time = self.get_utc_timestamp_ms()
        
        return {
            'is_synced': self.time_server_sync.is_synced or self.is_exchange_synced,
            'time_servers': self.time_server_sync.get_sync_status(),
            'exchange_sync': {
                'is_synced': self.is_exchange_synced,
                'last_sync': self.last_exchange_sync.isoformat() if self.last_exchange_sync else None,
                'time_offset_ms': self.exchange_time_offset,
                'sync_age_seconds': (datetime.utcnow() - self.last_exchange_sync).total_seconds() if self.last_exchange_sync else None
            },
            'sync_method': self.sync_method,
            'utc_time': utc_time,
            'utc_time_iso': datetime.utcfromtimestamp(utc_time / 1000).isoformat() + 'Z',
            'serverTime': utc_time,  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
            'status': 'active' if (self.time_server_sync.is_synced or self.is_exchange_synced) else 'not_synced'
        }

    def set_sync_method(self, method: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        if method in ['auto', 'exchange_only', 'time_servers_only']:
            self.sync_method = method
            logger.info(f"üîß –ú–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {method}")
        else:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {method}")

    def is_candle_closed(self, kline_data: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ UTC –≤—Ä–µ–º–µ–Ω–∏"""
        utc_time = self.get_utc_timestamp_ms()
        candle_end_time = int(kline_data['end'])

        # –°–≤–µ—á–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç–æ–π, –µ—Å–ª–∏ UTC –≤—Ä–µ–º—è >= –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–≤–µ—á–∏
        return utc_time >= candle_end_time

    def get_candle_close_time_utc(self, kline_start_time: int) -> datetime:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏ –≤ UTC"""
        return datetime.utcfromtimestamp((kline_start_time + 60000) / 1000)