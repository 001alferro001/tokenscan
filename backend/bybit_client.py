import asyncio
import json
import logging
import websockets
from typing import List, Dict, Optional, Set
import requests
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)


class BybitWebSocketClient:
    def __init__(self, trading_pairs: List[str], alert_manager, connection_manager):
        self.trading_pairs = set()  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
        self.alert_manager = alert_manager
        self.connection_manager = connection_manager
        self.websocket = None
        self.is_running = False
        self.ping_task = None
        self.subscription_update_task = None
        self.last_message_time = None

        # Bybit WebSocket URLs
        self.ws_url = "wss://stream.bybit.com/v5/public/linear"
        self.rest_url = "https://api.bybit.com"

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.update_interval = alert_manager.settings.get('update_interval_seconds', 1)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        self.messages_received = 0
        self.last_stats_log = datetime.utcnow()

        # –ö—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
        self.processed_candles = {}  # symbol -> last_processed_timestamp

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫
        self.subscribed_pairs = set()  # –ü–∞—Ä—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã
        self.subscription_pending = set()  # –ü–∞—Ä—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        self.last_subscription_update = datetime.utcnow()

        # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.data_loading_complete = False
        self.initial_subscription_complete = False

    async def start(self):
        """–ó–∞–ø—É—Å–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å—é"""
        self.is_running = True
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")

        try:
            # –®–∞–≥ 1: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
            logger.info("üìã –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
            await self._load_trading_pairs()

            # –®–∞–≥ 2: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä
            logger.info("üìä –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
            await self._load_historical_data()

            # –®–∞–≥ 3: –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å–µ –ø–∞—Ä—ã
            logger.info("üîå –®–∞–≥ 3: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–∞—Ä—ã...")
            await self._connect_and_subscribe()

            # –®–∞–≥ 4: –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
            logger.info("‚öôÔ∏è –®–∞–≥ 4: –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á...")
            await self._start_periodic_tasks()

            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            raise

    async def _load_trading_pairs(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            current_pairs = await self.alert_manager.db_manager.get_watchlist()
            self.trading_pairs = set(current_pairs)
            logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.trading_pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            
            if len(self.trading_pairs) == 0:
                logger.warning("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –ø—É—Å—Ç. –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –æ–∂–∏–¥–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä.")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {e}")
            raise

    async def _load_historical_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä"""
        if not self.trading_pairs:
            logger.info("üìä –ù–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
            self.data_loading_complete = True
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è
            retention_hours = self.alert_manager.settings.get('data_retention_hours', 2)
            analysis_hours = self.alert_manager.settings.get('analysis_hours', 1)
            total_hours_needed = retention_hours + analysis_hours + 1  # +1 —á–∞—Å –±—É—Ñ–µ—Ä–∞

            logger.info(f"üìä –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(self.trading_pairs)} –ø–∞—Ä (–ø–µ—Ä–∏–æ–¥: {total_hours_needed}—á)")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø–∞—Ä—ã –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö
            pairs_to_load = []
            pairs_with_data = []

            for symbol in self.trading_pairs:
                try:
                    integrity_info = await self.alert_manager.db_manager.check_data_integrity(
                        symbol, total_hours_needed
                    )

                    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ –∏–ª–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                    if integrity_info['integrity_percentage'] < 80 or integrity_info['total_existing'] < 60:
                        pairs_to_load.append(symbol)
                        logger.debug(f"üìä {symbol}: –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ ({integrity_info['total_existing']}/{integrity_info['total_expected']} —Å–≤–µ—á–µ–π)")
                    else:
                        pairs_with_data.append(symbol)
                        logger.debug(f"‚úÖ {symbol}: –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã ({integrity_info['integrity_percentage']:.1f}%)")

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
                    pairs_to_load.append(symbol)

            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(pairs_with_data)} –ø–∞—Ä —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, {len(pairs_to_load)} —Ç—Ä–µ–±—É—é—Ç –∑–∞–≥—Ä—É–∑–∫–∏")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞—Ä, –∫–æ—Ç–æ—Ä—ã–º —ç—Ç–æ –Ω—É–∂–Ω–æ
            if pairs_to_load:
                logger.info(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(pairs_to_load)} –ø–∞—Ä...")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ API
                batch_size = 10
                for i in range(0, len(pairs_to_load), batch_size):
                    batch = pairs_to_load[i:i + batch_size]
                    logger.info(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–∫–µ—Ç–∞ {i//batch_size + 1}: {len(batch)} –ø–∞—Ä")
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä—ã –≤ –ø–∞–∫–µ—Ç–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                    tasks = [self._load_symbol_data(symbol, total_hours_needed) for symbol in batch]
                    await asyncio.gather(*tasks, return_exceptions=True)
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
                    if i + batch_size < len(pairs_to_load):
                        await asyncio.sleep(1)

                logger.info("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            else:
                logger.info("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã, –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

            self.data_loading_complete = True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

    async def _load_symbol_data(self, symbol: str, hours: int):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            end_time_ms = int(datetime.utcnow().timestamp() * 1000)
            start_time_ms = end_time_ms - (hours * 60 * 60 * 1000)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏
            await self._load_full_period(symbol, start_time_ms, end_time_ms)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")

    async def _load_full_period(self, symbol: str, start_time_ms: int, end_time_ms: int):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            hours = (end_time_ms - start_time_ms) / (60 * 60 * 1000)
            limit = min(int(hours * 60) + 60, 1000)

            url = f"{self.rest_url}/v5/market/kline"
            params = {
                'category': 'linear',
                'symbol': symbol,
                'interval': '1',
                'start': start_time_ms,
                'end': end_time_ms,
                'limit': limit
            }

            response = requests.get(url, params=params, timeout=10)
            data = response.json()

            if data.get('retCode') == 0:
                klines = data['result']['list']
                klines.reverse()  # Bybit –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ

                saved_count = 0
                skipped_count = 0

                for kline in klines:
                    # –ë–∏—Ä–∂–∞ –ø–µ—Ä–µ–¥–∞–µ—Ç –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                    kline_timestamp_ms = int(kline[0])

                    # –î–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ –º–∏–Ω—É—Ç
                    rounded_timestamp = (kline_timestamp_ms // 60000) * 60000

                    kline_data = {
                        'start': rounded_timestamp,
                        'end': rounded_timestamp + 60000,
                        'open': kline[1],
                        'high': kline[2],
                        'low': kline[3],
                        'close': kline[4],
                        'volume': kline[5],
                        'confirm': True  # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã—Ç—ã
                    }

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–∞ —Å–≤–µ—á–∞ –≤ –±–∞–∑–µ
                    existing = await self._check_candle_exists(symbol, rounded_timestamp)
                    if not existing:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç—É—é —Å–≤–µ—á—É
                        await self.alert_manager.db_manager.save_kline_data(symbol, kline_data, is_closed=True)
                        saved_count += 1
                    else:
                        skipped_count += 1

                logger.debug(f"üìä {symbol}: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {saved_count} –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π, –ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped_count} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {data.get('retMsg')}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è {symbol}: {e}")

    async def _check_candle_exists(self, symbol: str, timestamp_ms: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–≤–µ—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            cursor = self.alert_manager.db_manager.connection.cursor()
            cursor.execute("""
                SELECT 1 FROM kline_data 
                WHERE symbol = %s AND open_time_ms = %s
                LIMIT 1
            """, (symbol, timestamp_ms))

            result = cursor.fetchone()
            cursor.close()

            return result is not None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–≤–µ—á–∏: {e}")
            return False

    async def _connect_and_subscribe(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ –ø–∞—Ä—ã"""
        if not self.trading_pairs:
            logger.info("üîå –ù–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏")
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        asyncio.create_task(self._websocket_connection_loop())

        # –ñ–¥–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        max_wait = 30  # –º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
        wait_time = 0
        while not self.websocket or not self.websocket.open:
            await asyncio.sleep(1)
            wait_time += 1
            if wait_time >= max_wait:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")

        logger.info("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    async def _websocket_connection_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        while self.is_running:
            try:
                await self._connect_websocket()
            except Exception as e:
                logger.error(f"‚ùå WebSocket –æ—à–∏–±–∫–∞: {e}")
                if self.is_running:
                    logger.info("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(5)

    async def _connect_websocket(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ –í–°–ï —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã"""
        try:
            logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket: {self.ws_url}")

            async with websockets.connect(
                    self.ws_url,
                    ping_interval=30,
                    ping_timeout=10,
                    close_timeout=10
            ) as websocket:
                self.websocket = websocket
                self.last_message_time = datetime.utcnow()

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫
                self.subscribed_pairs.clear()
                self.subscription_pending.clear()

                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ kline –¥–∞–Ω–Ω—ã–µ –¥–ª—è –í–°–ï–• —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
                if self.trading_pairs:
                    await self._subscribe_to_pairs(self.trading_pairs)

                logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∞ {len(self.trading_pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                await self.connection_manager.broadcast_json({
                    "type": "connection_status",
                    "status": "connected",
                    "pairs_count": len(self.trading_pairs),
                    "subscribed_count": len(self.subscribed_pairs),
                    "pending_count": len(self.subscription_pending),
                    "update_interval": self.update_interval,
                    "timestamp": datetime.utcnow().isoformat()
                })

                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                self.ping_task = asyncio.create_task(self._monitor_connection())

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                async for message in websocket:
                    if not self.is_running:
                        break

                    try:
                        self.last_message_time = datetime.utcnow()
                        self.messages_received += 1

                        data = json.loads(message)
                        await self._handle_message(data)

                        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                        if (datetime.utcnow() - self.last_stats_log).total_seconds() > 300:
                            logger.info(f"üìä WebSocket —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.messages_received} —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–¥–ø–∏—Å–∞–Ω–æ –Ω–∞ {len(self.subscribed_pairs)} –ø–∞—Ä")
                            self.last_stats_log = datetime.utcnow()

                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            raise
        finally:
            if self.ping_task:
                self.ping_task.cancel()

    async def _subscribe_to_pairs(self, pairs: Set[str]):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã"""
        if not pairs:
            return

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 50 –ø–∞—Ä –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π WebSocket
        batch_size = 50
        pairs_list = list(pairs)
        
        for i in range(0, len(pairs_list), batch_size):
            batch = pairs_list[i:i + batch_size]
            subscribe_message = {
                "op": "subscribe",
                "args": [f"kline.1.{pair}" for pair in batch]
            }

            await self.websocket.send(json.dumps(subscribe_message))
            logger.info(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–∞–∫–µ—Ç {i // batch_size + 1}: {len(batch)} –ø–∞—Ä")

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            self.subscription_pending.update(batch)

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
            if i + batch_size < len(pairs_list):
                await asyncio.sleep(0.5)

    async def _start_periodic_tasks(self):
        """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
        # –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
        self.subscription_update_task = asyncio.create_task(self._subscription_updater())
        
        # –ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        asyncio.create_task(self._data_cleanup_task())

    async def _subscription_updater(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –Ω–æ–≤—ã–µ –ø–∞—Ä—ã"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –º–∏–Ω—É—Ç)
        check_interval_minutes = self.alert_manager.settings.get('pairs_check_interval_minutes', 30)
        
        logger.info(f"‚öôÔ∏è –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä –∫–∞–∂–¥—ã–µ {check_interval_minutes} –º–∏–Ω—É—Ç")
        
        while self.is_running:
            try:
                await asyncio.sleep(check_interval_minutes * 60)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã
                
                if not self.is_running:
                    break
                
                logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                current_pairs = set(await self.alert_manager.db_manager.get_watchlist())
                
                # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ –ø–∞—Ä—ã
                new_pairs = current_pairs - self.trading_pairs
                
                # –ù–∞—Ö–æ–¥–∏–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã
                removed_pairs = self.trading_pairs - current_pairs
                
                if new_pairs or removed_pairs:
                    logger.info(f"üìã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä: +{len(new_pairs)} –Ω–æ–≤—ã—Ö, -{len(removed_pairs)} —É–¥–∞–ª–µ–Ω–Ω—ã—Ö")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
                    self.trading_pairs = current_pairs.copy()
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–∞—Ä
                    if new_pairs:
                        await self._load_data_for_new_pairs(new_pairs)
                    
                    # –ï—Å–ª–∏ WebSocket –∞–∫—Ç–∏–≤–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
                    if self.websocket and self.websocket.open:
                        await self._update_subscriptions(new_pairs, removed_pairs)
                    
                    logger.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                else:
                    logger.debug("üìã –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")
                
                self.last_subscription_update = datetime.utcnow()
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä: {e}")
                await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 1 –º–∏–Ω—É—Ç—É

    async def _load_data_for_new_pairs(self, new_pairs: Set[str]):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤—ã—Ö –ø–∞—Ä"""
        try:
            retention_hours = self.alert_manager.settings.get('data_retention_hours', 2)
            analysis_hours = self.alert_manager.settings.get('analysis_hours', 1)
            total_hours_needed = retention_hours + analysis_hours + 1

            logger.info(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(new_pairs)} –Ω–æ–≤—ã—Ö –ø–∞—Ä...")
            
            for symbol in new_pairs:
                try:
                    await self._load_symbol_data(symbol, total_hours_needed)
                    await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–π –ø–∞—Ä—ã {symbol}: {e}")
                    continue
            
            logger.info("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤—ã—Ö –ø–∞—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤—ã—Ö –ø–∞—Ä: {e}")

    async def _update_subscriptions(self, new_pairs: Set[str], removed_pairs: Set[str]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ WebSocket"""
        try:
            # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä
            if removed_pairs:
                unsubscribe_message = {
                    "op": "unsubscribe",
                    "args": [f"kline.1.{pair}" for pair in removed_pairs]
                }
                await self.websocket.send(json.dumps(unsubscribe_message))
                logger.info(f"üì° –û—Ç–ø–∏—Å–∫–∞ –æ—Ç {len(removed_pairs)} –ø–∞—Ä")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫
                self.subscribed_pairs -= removed_pairs

            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–µ –ø–∞—Ä—ã
            if new_pairs:
                await self._subscribe_to_pairs(new_pairs)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await self.connection_manager.broadcast_json({
                "type": "subscription_updated",
                "total_pairs": len(self.trading_pairs),
                "subscribed_pairs": len(self.subscribed_pairs),
                "new_pairs": list(new_pairs),
                "removed_pairs": list(removed_pairs),
                "timestamp": datetime.utcnow().isoformat()
            })

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ WebSocket: {e}")

    async def _data_cleanup_task(self):
        """–ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        while self.is_running:
            try:
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–π —á–∞—Å
                await asyncio.sleep(3600)
                
                if not self.is_running:
                    break
                
                logger.info("üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
                
                retention_hours = self.alert_manager.settings.get('data_retention_hours', 2)
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                for symbol in self.trading_pairs:
                    try:
                        await self.alert_manager.db_manager.cleanup_old_candles(symbol, retention_hours)
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
                
                logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    async def _handle_message(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if 'success' in data:
                if data['success']:
                    logger.debug("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ WebSocket –ø–∞–∫–µ—Ç")
                    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–∞—Ä—ã –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö –≤ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ
                    # (—Ç–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–∫–∏—Ö –ø–∞—Ä —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏)
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ WebSocket: {data}")
                return

            if 'op' in data:
                logger.debug(f"üì° –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ WebSocket: {data}")
                return

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
            if data.get('topic', '').startswith('kline.1.'):
                kline_data = data['data'][0]
                symbol = data['topic'].split('.')[-1]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏–º–≤–æ–ª –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ
                if symbol not in self.trading_pairs:
                    logger.debug(f"üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {symbol}, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ watchlist")
                    return

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –≤ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ, –∑–Ω–∞—á–∏—Ç –ø–æ–¥–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç)
                if symbol in self.subscription_pending:
                    self.subscription_pending.remove(symbol)
                self.subscribed_pairs.add(symbol)

                # –ë–∏—Ä–∂–∞ –ø–µ—Ä–µ–¥–∞–µ—Ç –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                start_time_ms = int(kline_data['start'])
                end_time_ms = int(kline_data['end'])
                is_closed = kline_data.get('confirm', False)

                # –î–ª—è –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–≤–ª—è–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã, –Ω–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–≤–µ—á–µ–π - –æ–∫—Ä—É–≥–ª—è–µ–º
                if is_closed:
                    # –ó–∞–∫—Ä—ã—Ç—ã–µ —Å–≤–µ—á–∏ —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –¥–æ –º–∏–Ω—É—Ç
                    start_time_ms = (start_time_ms // 60000) * 60000
                    end_time_ms = (end_time_ms // 60000) * 60000

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                formatted_data = {
                    'start': start_time_ms,
                    'end': end_time_ms,
                    'open': kline_data['open'],
                    'high': kline_data['high'],
                    'low': kline_data['low'],
                    'close': kline_data['close'],
                    'volume': kline_data['volume'],
                    'confirm': is_closed
                }

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–≤–µ—á–∏
                if is_closed:
                    await self._process_closed_candle(symbol, formatted_data)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É (—Ñ–æ—Ä–º–∏—Ä—É—é—â–∏–µ—Å—è –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã–µ)
                await self.alert_manager.db_manager.save_kline_data(symbol, formatted_data, is_closed)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞–º (–ø–æ—Ç–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
                stream_item = {
                    "type": "kline_update",
                    "symbol": symbol,
                    "data": formatted_data,
                    "timestamp": datetime.utcnow().isoformat(),
                    "is_closed": is_closed,
                    "server_timestamp": self.alert_manager._get_current_timestamp_ms() if hasattr(self.alert_manager,
                                                                                                  '_get_current_timestamp_ms') else int(
                        datetime.utcnow().timestamp() * 1000)
                }

                await self.connection_manager.broadcast_json(stream_item)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ kline –¥–∞–Ω–Ω—ã—Ö: {e}")

    async def _process_closed_candle(self, symbol: str, formatted_data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–∏"""
        try:
            start_time_ms = formatted_data['start']
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–≤–µ—á–µ–π
            last_processed = self.processed_candles.get(symbol, 0)
            if start_time_ms > last_processed:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –∞–ª–µ—Ä—Ç–æ–≤
                alerts = await self.alert_manager.process_kline_data(symbol, formatted_data)

                # –ü–æ–º–µ—á–∞–µ–º —Å–≤–µ—á—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
                self.processed_candles[symbol] = start_time_ms

                # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö
                await self._maintain_data_range(symbol)

                logger.debug(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞—è —Å–≤–µ—á–∞ {symbol} –≤ {start_time_ms}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–∏ –¥–ª—è {symbol}: {e}")

    async def _maintain_data_range(self, symbol: str):
        """–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            retention_hours = self.alert_manager.settings.get('data_retention_hours', 2)
            analysis_hours = self.alert_manager.settings.get('analysis_hours', 1)
            total_hours_needed = retention_hours + analysis_hours + 1

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            await self.alert_manager.db_manager.cleanup_old_candles(symbol, total_hours_needed)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            integrity_info = await self.alert_manager.db_manager.check_data_integrity(symbol, total_hours_needed)
            
            # –ï—Å–ª–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è, –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            if integrity_info['integrity_percentage'] < 90 and integrity_info['missing_count'] > 5:
                logger.debug(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {integrity_info['missing_count']} —Å–≤–µ—á–µ–π")
                await self._load_symbol_data(symbol, total_hours_needed)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")

    async def _monitor_connection(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        while self.is_running:
            try:
                await asyncio.sleep(60)

                if self.last_message_time:
                    time_since_last_message = (datetime.utcnow() - self.last_message_time).total_seconds()

                    if time_since_last_message > 120:
                        logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç WebSocket —É–∂–µ {time_since_last_message:.0f} —Å–µ–∫—É–Ω–¥")

                        await self.connection_manager.broadcast_json({
                            "type": "connection_status",
                            "status": "disconnected",
                            "reason": "No messages received",
                            "timestamp": datetime.utcnow().isoformat()
                        })
                        break

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        self.is_running = False
        if self.ping_task:
            self.ping_task.cancel()
        if self.subscription_update_task:
            self.subscription_update_task.cancel()
        if self.websocket:
            await self.websocket.close()
        logger.info("üõë WebSocket –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def get_subscription_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å–æ–∫"""
        return {
            'total_pairs': len(self.trading_pairs),
            'subscribed_pairs': len(self.subscribed_pairs),
            'pending_pairs': len(self.subscription_pending),
            'last_update': self.last_subscription_update.isoformat() if self.last_subscription_update else None,
            'subscription_rate': len(self.subscribed_pairs) / len(self.trading_pairs) * 100 if self.trading_pairs else 0,
            'data_loading_complete': self.data_loading_complete,
            'initial_subscription_complete': self.initial_subscription_complete
        }